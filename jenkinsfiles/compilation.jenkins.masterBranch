#!groovy
pipeline {
	agent {  label 'node1' }
	options {
		copyArtifactPermission('projectone_pet_clinic_deploy');
	}
	parameters {
		// Choice of GIT branch parameter
		gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
		// Choice of DB for Parameterized Trigger plugin
		choice(name: 'DATA_BASE', choices: "H2\nMySQL", description: 'Data base')
	}
	tools {
		jdk 'openjdk-11'
		maven 'my-maven'
	}
	environment {
		BUILDTIME = "${sh(script:'date "+%Y-%m-%d %H:%M:%S"', returnStdout: true).trim()}"
		APP_NAME = readMavenPom().getArtifactId()
		VERSION = readMavenPom().getVersion()
	}
	stages { 
		// Print pipeline parameters
		stage("Print pipeline parameters") {
			steps {
				sh """
				echo "Data base: ${params.DATA_BASE}"
				echo "GIT branch: ${params.BRANCH}"
				echo "Turn on/off Maven CheckStyle plugin: ${params.SKIP_CHECKSTYLE}"
				echo "Turn on/off Maven unit tests: ${params.SKIP_TESTS}"				
				echo "Sonar Quality Gate wait time (minutes): ${params.SONAR_QG_TIME_WAIT}"
				"""
			}			
		}
		// Set git parameters
		stage("Set git") {
			steps {
				git branch: "${params.BRANCH}", credentialsId: 'jenkins-host-private-key', url: 'git@git.epam.com:oleksandr_frolov/spring-petclinic.git'
			}
		}
		// Build Name
		stage("Set Build Name") {
			steps {
				buildName "${env.BUILDTIME}_build#${env.BUILD_NUMBER}_${env.APP_NAME}_${env.VERSION}_build"
			}			
		}
		// Maven
		stage("Maven package") {
			steps {
				script {
					if ("${params.SKIP_CHECKSTYLE}" == "true") {
							sh "mvn clean package -Dcheckstyle.skip -Dmaven.test.skip=${params.SKIP_TESTS}"
					} 
					else {
							sh "mvn clean package -Dmaven.test.skip=${params.SKIP_TESTS}"
					}
				}
			}			
		}
	}
}
